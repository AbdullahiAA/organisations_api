var W=Object.create;var q=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var Q=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var X=(e,s)=>{for(var t in s)q(e,t,{get:s[t],enumerable:!0})},C=(e,s,t,a)=>{if(s&&typeof s=="object"||typeof s=="function")for(let r of H(s))!V.call(e,r)&&r!==t&&q(e,r,{get:()=>s[r],enumerable:!(a=$(s,r))||a.enumerable});return e};var d=(e,s,t)=>(t=e!=null?W(Q(e)):{},C(s||!e||!e.__esModule?q(t,"default",{value:e,enumerable:!0}):t,e)),Y=e=>C(q({},"__esModule",{value:!0}),e);var es={};X(es,{default:()=>ss});module.exports=Y(es);var Us=require("reflect-metadata"),v=d(require("express")),K=d(require("dotenv"));var U=require("sequelize-typescript"),A=d(require("dotenv"));A.default.config();var Z=new U.Sequelize(process.env.DATABASE_URL,{dialect:"postgres",models:[__dirname+"/models"]}),c=Z;var B=d(require("express")),O=d(require("bcryptjs")),b=d(require("jsonwebtoken")),x=require("uuid");var I=require("sequelize");var T=class extends I.Model{};T.init({orgId:{type:I.DataTypes.STRING,primaryKey:!0,unique:!0,allowNull:!1},name:{type:I.DataTypes.STRING,allowNull:!1},description:{type:I.DataTypes.STRING}},{sequelize:c,modelName:"Organisation"});var m=T;var l=require("sequelize");var j=class extends l.Model{};j.init({userId:{type:l.DataTypes.STRING,primaryKey:!0,unique:!0,allowNull:!1},firstName:{type:l.DataTypes.STRING,allowNull:!1},lastName:{type:l.DataTypes.STRING,allowNull:!1},email:{type:l.DataTypes.STRING,unique:!0,allowNull:!1},password:{type:l.DataTypes.STRING,allowNull:!1},phone:{type:l.DataTypes.STRING,allowNull:!1}},{sequelize:c,modelName:"User"});var i=j;var h=require("sequelize");var y=class extends h.Model{};y.init({userId:{type:h.DataTypes.STRING,allowNull:!1},orgId:{type:h.DataTypes.STRING,allowNull:!1}},{sequelize:c,modelName:"UserOrganisation"});y.removeAttribute("id");var u=y;i.belongsToMany(m,{through:"UserOrganisation",foreignKey:"userId"});m.belongsToMany(i,{through:"UserOrganisation",foreignKey:"orgId"});var S=B.default.Router();S.post("/register",async(e,s)=>{let{firstName:t,lastName:a,email:r,password:o,phone:R}=e.body,p=[];if(t||p.push({field:"firstName",message:"First name is required"}),a||p.push({field:"lastName",message:"Last name is required"}),r||p.push({field:"email",message:"Email is required"}),o||p.push({field:"password",message:"Password is required"}),R||p.push({field:"phone",message:"Phone number is required"}),p.length>0)return s.status(422).json({errors:p});try{let w=await O.default.hash(o,10),n=await i.create({userId:(0,x.v4)(),firstName:t,lastName:a,email:r,password:w,phone:R}),L=await m.create({orgId:(0,x.v4)(),name:`${t}'s Organisation`,description:""});await u.create({userId:n.userId,orgId:L.orgId}),s.status(201).json({status:"success",message:"Registration successful",data:{accessToken:b.default.sign({userId:n.userId},process.env.JWT_SECRET,{expiresIn:"1h"}),user:{userId:n.userId,firstName:n.firstName,lastName:n.lastName,email:n.email,phone:n.phone}}})}catch{s.status(400).json({status:"Bad request",message:"Registration unsuccessful",statusCode:400})}});S.post("/login",async(e,s)=>{let{email:t,password:a}=e.body;if(!t||!a)return s.status(401).json({status:"Bad request",message:"Authentication failed",statusCode:401});let r=await i.findOne({where:{email:t}});if(!r||!await O.default.compare(a,r.password))return s.status(401).json({status:"Bad request",message:"Authentication failed",statusCode:401});let o=b.default.sign({userId:r.userId},process.env.JWT_SECRET,{expiresIn:"1h"});s.status(200).json({status:"success",message:"Login successful",data:{accessToken:o,user:{userId:r.userId,firstName:r.firstName,lastName:r.lastName,email:r.email,phone:r.phone}}})});var k=S;var E=d(require("express"));var G=d(require("jsonwebtoken")),f=(e,s,t)=>{let a=e.headers.authorization,r=a&&a.split(" ")[1];if(!r)return s.sendStatus(401);G.default.verify(r,process.env.JWT_SECRET,(o,R)=>{if(o)return s.sendStatus(401);e.user=R,t()})};function P(e,s){return e.some(t=>s.includes(t))}var z=E.default.Router();z.get("/:id",f,async(e,s)=>{let t=e?.user?.userId,{id:a}=e.params,r=await i.findByPk(a);if(!r)return s.status(404).json({status:"error",message:"User not found"});let R=(await u.findAll({where:{userId:a}})).map(n=>n.orgId),w=(await u.findAll({where:{userId:t}})).map(n=>n.orgId);return P(R,w)?s.status(200).json({status:"success",message:"User retrieved successfully",data:{userId:r.userId,firstName:r.firstName,lastName:r.lastName,email:r.email,phone:r.phone}}):s.status(404).json({status:"error",message:"User not found"})});var _=z;var J=d(require("express"));var M=require("uuid");var N=J.default.Router();N.get("/",f,async(e,s)=>{try{let t=e?.user?.userId,a=await u.findAll({where:{userId:t}});s.status(200).json({status:"success",message:"Organisations retrieved successfully",data:{organisations:a}})}catch{s.status(400).json({status:"Bad Request",message:"Client error",statusCode:400})}});N.post("/",f,async(e,s)=>{try{let{name:t,description:a}=e.body,r=e?.user?.userId;if(!t)return s.status(422).json({status:"error",message:"Name is required"});let o=await m.create({orgId:(0,M.v4)(),name:t,description:a});await u.create({userId:r,orgId:o.orgId}),s.status(201).json({status:"success",message:"Organisation created successfully",data:{orgId:o.orgId,name:o.name,description:o.description}})}catch{s.status(400).json({status:"Bad Request",message:"Client error",statusCode:400})}});N.get("/:orgId",f,async(e,s)=>{try{let{orgId:t}=e.params,a=await m.findByPk(t);if(!a)return s.status(404).json({status:"error",message:"Organisation not found"});s.status(200).json({status:"success",message:"Organisation retrieved successfully",data:{orgId:a.orgId,name:a.name,description:a.description}})}catch{s.status(400).json({status:"Bad Request",message:"Client error",statusCode:400})}});N.post("/:orgId/users",f,async(e,s)=>{try{let{orgId:t}=e.params,{userId:a}=e.body;if(!await m.findByPk(t))return s.status(404).json({status:"error",message:"Organisation not found"});if(!await i.findByPk(a))return s.status(404).json({status:"error",message:"User not found"});await u.create({userId:a,orgId:t}),s.status(200).json({status:"success",message:"User added to organisation successfully"})}catch{s.status(400).json({status:"Bad Request",message:"Client error",statusCode:400})}});var D=N;K.default.config();var g=(0,v.default)();g.use(v.default.json());g.use("/auth",k);g.use("/api/users",_);g.use("/api/organisations",D);g.get("/",(e,s)=>{s.status(200).send("Successful")});g.all("*",(e,s)=>{s.status(404).json({status:"Not Found",message:"Route not found",statusCode:404})});var F=process.env.PORT||5431;c.sync().then(()=>{g.listen(Number(F),"0.0.0.0",()=>{console.log(`Server is running on port ${F}`)})});var ss=g;
